// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_ipfs is a generated GoMock package.
package mock_ipfs

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockInterface) Get(hash, outdir string) error {
	ret := m.ctrl.Call(m, "Get", hash, outdir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockInterfaceMockRecorder) Get(hash, outdir interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterface)(nil).Get), hash, outdir)
}

// AddDir mocks base method
func (m *MockInterface) AddDir(dir string) (string, error) {
	ret := m.ctrl.Call(m, "AddDir", dir)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDir indicates an expected call of AddDir
func (mr *MockInterfaceMockRecorder) AddDir(dir interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDir", reflect.TypeOf((*MockInterface)(nil).AddDir), dir)
}

// Refs mocks base method
func (m *MockInterface) Refs(hash string, recursive bool) (<-chan string, error) {
	ret := m.ctrl.Call(m, "Refs", hash, recursive)
	ret0, _ := ret[0].(<-chan string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refs indicates an expected call of Refs
func (mr *MockInterfaceMockRecorder) Refs(hash, recursive interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refs", reflect.TypeOf((*MockInterface)(nil).Refs), hash, recursive)
}

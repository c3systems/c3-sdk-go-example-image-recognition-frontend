// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_p2p is a generated GoMock package.
package mock_p2p

import (
	mainchain "github.com/c3systems/c3-go/core/chain/mainchain"
	merkle "github.com/c3systems/c3-go/core/chain/merkle"
	statechain "github.com/c3systems/c3-go/core/chain/statechain"
	p2p "github.com/c3systems/c3-go/core/p2p"
	gomock "github.com/golang/mock/gomock"
	go_cid "github.com/ipfs/go-cid"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Props mocks base method
func (m *MockInterface) Props() p2p.Props {
	ret := m.ctrl.Call(m, "Props")
	ret0, _ := ret[0].(p2p.Props)
	return ret0
}

// Props indicates an expected call of Props
func (mr *MockInterfaceMockRecorder) Props() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Props", reflect.TypeOf((*MockInterface)(nil).Props))
}

// Set mocks base method
func (m *MockInterface) Set(v interface{}) (*go_cid.Cid, error) {
	ret := m.ctrl.Call(m, "Set", v)
	ret0, _ := ret[0].(*go_cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (mr *MockInterfaceMockRecorder) Set(v interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockInterface)(nil).Set), v)
}

// SetMainchainBlock mocks base method
func (m *MockInterface) SetMainchainBlock(block *mainchain.Block) (*go_cid.Cid, error) {
	ret := m.ctrl.Call(m, "SetMainchainBlock", block)
	ret0, _ := ret[0].(*go_cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMainchainBlock indicates an expected call of SetMainchainBlock
func (mr *MockInterfaceMockRecorder) SetMainchainBlock(block interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMainchainBlock", reflect.TypeOf((*MockInterface)(nil).SetMainchainBlock), block)
}

// SetStatechainBlock mocks base method
func (m *MockInterface) SetStatechainBlock(block *statechain.Block) (*go_cid.Cid, error) {
	ret := m.ctrl.Call(m, "SetStatechainBlock", block)
	ret0, _ := ret[0].(*go_cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatechainBlock indicates an expected call of SetStatechainBlock
func (mr *MockInterfaceMockRecorder) SetStatechainBlock(block interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatechainBlock", reflect.TypeOf((*MockInterface)(nil).SetStatechainBlock), block)
}

// SetStatechainTransaction mocks base method
func (m *MockInterface) SetStatechainTransaction(tx *statechain.Transaction) (*go_cid.Cid, error) {
	ret := m.ctrl.Call(m, "SetStatechainTransaction", tx)
	ret0, _ := ret[0].(*go_cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatechainTransaction indicates an expected call of SetStatechainTransaction
func (mr *MockInterfaceMockRecorder) SetStatechainTransaction(tx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatechainTransaction", reflect.TypeOf((*MockInterface)(nil).SetStatechainTransaction), tx)
}

// SetStatechainDiff mocks base method
func (m *MockInterface) SetStatechainDiff(d *statechain.Diff) (*go_cid.Cid, error) {
	ret := m.ctrl.Call(m, "SetStatechainDiff", d)
	ret0, _ := ret[0].(*go_cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatechainDiff indicates an expected call of SetStatechainDiff
func (mr *MockInterfaceMockRecorder) SetStatechainDiff(d interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatechainDiff", reflect.TypeOf((*MockInterface)(nil).SetStatechainDiff), d)
}

// SetMerkleTree mocks base method
func (m *MockInterface) SetMerkleTree(tree *merkle.Tree) (*go_cid.Cid, error) {
	ret := m.ctrl.Call(m, "SetMerkleTree", tree)
	ret0, _ := ret[0].(*go_cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMerkleTree indicates an expected call of SetMerkleTree
func (mr *MockInterfaceMockRecorder) SetMerkleTree(tree interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMerkleTree", reflect.TypeOf((*MockInterface)(nil).SetMerkleTree), tree)
}

// GetMainchainBlock mocks base method
func (m *MockInterface) GetMainchainBlock(c *go_cid.Cid) (*mainchain.Block, error) {
	ret := m.ctrl.Call(m, "GetMainchainBlock", c)
	ret0, _ := ret[0].(*mainchain.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMainchainBlock indicates an expected call of GetMainchainBlock
func (mr *MockInterfaceMockRecorder) GetMainchainBlock(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainchainBlock", reflect.TypeOf((*MockInterface)(nil).GetMainchainBlock), c)
}

// GetStatechainBlock mocks base method
func (m *MockInterface) GetStatechainBlock(c *go_cid.Cid) (*statechain.Block, error) {
	ret := m.ctrl.Call(m, "GetStatechainBlock", c)
	ret0, _ := ret[0].(*statechain.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatechainBlock indicates an expected call of GetStatechainBlock
func (mr *MockInterfaceMockRecorder) GetStatechainBlock(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatechainBlock", reflect.TypeOf((*MockInterface)(nil).GetStatechainBlock), c)
}

// GetStatechainTransaction mocks base method
func (m *MockInterface) GetStatechainTransaction(c *go_cid.Cid) (*statechain.Transaction, error) {
	ret := m.ctrl.Call(m, "GetStatechainTransaction", c)
	ret0, _ := ret[0].(*statechain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatechainTransaction indicates an expected call of GetStatechainTransaction
func (mr *MockInterfaceMockRecorder) GetStatechainTransaction(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatechainTransaction", reflect.TypeOf((*MockInterface)(nil).GetStatechainTransaction), c)
}

// GetStatechainDiff mocks base method
func (m *MockInterface) GetStatechainDiff(c *go_cid.Cid) (*statechain.Diff, error) {
	ret := m.ctrl.Call(m, "GetStatechainDiff", c)
	ret0, _ := ret[0].(*statechain.Diff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatechainDiff indicates an expected call of GetStatechainDiff
func (mr *MockInterfaceMockRecorder) GetStatechainDiff(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatechainDiff", reflect.TypeOf((*MockInterface)(nil).GetStatechainDiff), c)
}

// GetMerkleTree mocks base method
func (m *MockInterface) GetMerkleTree(c *go_cid.Cid) (*merkle.Tree, error) {
	ret := m.ctrl.Call(m, "GetMerkleTree", c)
	ret0, _ := ret[0].(*merkle.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerkleTree indicates an expected call of GetMerkleTree
func (mr *MockInterfaceMockRecorder) GetMerkleTree(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerkleTree", reflect.TypeOf((*MockInterface)(nil).GetMerkleTree), c)
}

// FetchMostRecentStateBlock mocks base method
func (m *MockInterface) FetchMostRecentStateBlock(imageHash string, block *mainchain.Block) (*statechain.Block, error) {
	ret := m.ctrl.Call(m, "FetchMostRecentStateBlock", imageHash, block)
	ret0, _ := ret[0].(*statechain.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMostRecentStateBlock indicates an expected call of FetchMostRecentStateBlock
func (mr *MockInterfaceMockRecorder) FetchMostRecentStateBlock(imageHash, block interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMostRecentStateBlock", reflect.TypeOf((*MockInterface)(nil).FetchMostRecentStateBlock), imageHash, block)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_docker is a generated GoMock package.
package mock_docker

import (
	docker "github.com/c3systems/c3-go/core/docker"
	types "github.com/docker/docker/api/types"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// ListImages mocks base method
func (m *MockInterface) ListImages() ([]*docker.ImageSummary, error) {
	ret := m.ctrl.Call(m, "ListImages")
	ret0, _ := ret[0].([]*docker.ImageSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages
func (mr *MockInterfaceMockRecorder) ListImages() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockInterface)(nil).ListImages))
}

// PullImage mocks base method
func (m *MockInterface) PullImage(imageID string) error {
	ret := m.ctrl.Call(m, "PullImage", imageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullImage indicates an expected call of PullImage
func (mr *MockInterfaceMockRecorder) PullImage(imageID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImage", reflect.TypeOf((*MockInterface)(nil).PullImage), imageID)
}

// PushImage mocks base method
func (m *MockInterface) PushImage(imageID string) error {
	ret := m.ctrl.Call(m, "PushImage", imageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushImage indicates an expected call of PushImage
func (mr *MockInterfaceMockRecorder) PushImage(imageID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushImage", reflect.TypeOf((*MockInterface)(nil).PushImage), imageID)
}

// RunContainer mocks base method
func (m *MockInterface) RunContainer(imageID string, cmd []string, config *docker.RunContainerConfig) (string, error) {
	ret := m.ctrl.Call(m, "RunContainer", imageID, cmd, config)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunContainer indicates an expected call of RunContainer
func (mr *MockInterfaceMockRecorder) RunContainer(imageID, cmd, config interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunContainer", reflect.TypeOf((*MockInterface)(nil).RunContainer), imageID, cmd, config)
}

// StopContainer mocks base method
func (m *MockInterface) StopContainer(containerID string) error {
	ret := m.ctrl.Call(m, "StopContainer", containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopContainer indicates an expected call of StopContainer
func (mr *MockInterfaceMockRecorder) StopContainer(containerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockInterface)(nil).StopContainer), containerID)
}

// InspectContainer mocks base method
func (m *MockInterface) InspectContainer(containerID string) (types.ContainerJSON, error) {
	ret := m.ctrl.Call(m, "InspectContainer", containerID)
	ret0, _ := ret[0].(types.ContainerJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectContainer indicates an expected call of InspectContainer
func (mr *MockInterfaceMockRecorder) InspectContainer(containerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectContainer", reflect.TypeOf((*MockInterface)(nil).InspectContainer), containerID)
}

// ContainerExec mocks base method
func (m *MockInterface) ContainerExec(containerID string, cmd []string) (io.Reader, error) {
	ret := m.ctrl.Call(m, "ContainerExec", containerID, cmd)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerExec indicates an expected call of ContainerExec
func (mr *MockInterfaceMockRecorder) ContainerExec(containerID, cmd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerExec", reflect.TypeOf((*MockInterface)(nil).ContainerExec), containerID, cmd)
}

// ReadImage mocks base method
func (m *MockInterface) ReadImage(imageID string) (io.Reader, error) {
	ret := m.ctrl.Call(m, "ReadImage", imageID)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadImage indicates an expected call of ReadImage
func (mr *MockInterfaceMockRecorder) ReadImage(imageID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadImage", reflect.TypeOf((*MockInterface)(nil).ReadImage), imageID)
}

// LoadImage mocks base method
func (m *MockInterface) LoadImage(input io.Reader) error {
	ret := m.ctrl.Call(m, "LoadImage", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadImage indicates an expected call of LoadImage
func (mr *MockInterfaceMockRecorder) LoadImage(input interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImage", reflect.TypeOf((*MockInterface)(nil).LoadImage), input)
}

// LoadImageByFilepath mocks base method
func (m *MockInterface) LoadImageByFilepath(filepath string) error {
	ret := m.ctrl.Call(m, "LoadImageByFilepath", filepath)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadImageByFilepath indicates an expected call of LoadImageByFilepath
func (mr *MockInterfaceMockRecorder) LoadImageByFilepath(filepath interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImageByFilepath", reflect.TypeOf((*MockInterface)(nil).LoadImageByFilepath), filepath)
}
